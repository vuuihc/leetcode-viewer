{"java":"public class Solution {\n    public void wiggleSort(int[] nums) {\n        double median = getMedian(nums);\n        int n = nums.length,\n                i = 0, j = 0, k = n - 1;\n//        System.out.println(\"mid:\" + median);\n        while (j <= k) {\n            if (nums[vi(j, n)] < median) {\n//                System.out.println(\"before:\"+Arrays.toString(nums));\n//                System.out.println(\"move :\"+vi(j,n)+\"to\"+vi(k,n));\n                swap(nums, vi(j, n), vi(k--, n));\n//                System.out.println(\"after:\"+Arrays.toString(nums));\n            } else if (nums[vi(j, n)] > median) {\n//                System.out.println(\"before:\"+Arrays.toString(nums));\n//                System.out.println(\"move :\"+vi(j,n)+\"to\"+vi(i,n));\n                swap(nums, vi(i++, n), vi(j++, n));\n//                System.out.println(\"after:\"+Arrays.toString(nums));\n            } else {\n                j++;\n            }\n        }\n\n    }\n\n    public void swap(int[] data, int a, int b) {\n        int temp = data[a];\n        data[a] = data[b];\n        data[b] = temp;\n    }\n\n    public int vi(int i, int n) {\n        return (1 + 2 * i) % (n | 1);\n    }\n\n    public int getMax(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n        }\n        return max;\n    }\n\n    public int getMin(int[] nums) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n        }\n        return min;\n    }\n\n    public double getMedian(int[] nums) {\n        int max = getMax(nums), min = getMin(nums);\n        int[] a = new int[max - min + 1];\n        for (int i = 0; i < nums.length; i++) {\n            a[nums[i] - min]++;\n        }\n        int count = 0;\n//        System.out.println(Arrays.toString(a));\n        double halfLenght = nums.length / 2;\n        for (int i = 0; i < a.length; i++) {\n            if (count < halfLenght && count + a[i] > halfLenght) {\n                return i + min + 0.0;\n            } else if (count + a[i] == halfLenght) {\n                if (nums.length % 2 == 1) {\n                    return i + min + 1.0;\n                } else {\n                    return i + min + 0.5;\n                }\n            }\n            count += a[i];\n        }\n        return 0;\n    }\n\n}"}